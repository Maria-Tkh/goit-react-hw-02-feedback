{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.jsx","components/Statistics/Statistics.jsx","components/Section/Section.jsx","components/NotificationMessage/NotificatioMessage.jsx","components/App.jsx","index.js"],"names":["FeedbackOptions","options","onLeaveFeedback","map","option","type","name","onClick","Statistics","good","neutral","bad","total","positivePercentage","Section","title","children","NotificationMessage","message","App","state","handleCounter","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAGaA,EAAkB,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBACzC,OACE,8BACGD,EAAQE,KAAI,SAAAC,GAAM,OACjB,wBAEEC,KAAK,SACLC,KAAK,SACLC,QAAS,WACPL,EAAgBE,IALpB,SAQGA,GAPIA,SCLFI,EAAa,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBACtD,OACE,+BACE,wCAAWJ,KACX,2CAAcC,KACd,uCAAUC,KACV,wCAAWC,EAAX,OACA,qDAAwBC,EAAxB,YCPOC,EAAU,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAC/B,OACE,qCACE,6BAAKD,IACL,8BAAMC,QCPCC,EAAsB,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpC,OAAO,4BAAIA,KCKAC,EAAb,4MACEC,MAAQ,CACNX,KAAM,EACNC,QAAS,EACTC,IAAK,GAJT,EAOEU,cAAgB,SAAAjB,GACd,EAAKkB,UAAS,SAAAC,GAAS,sBACpBnB,EAASmB,EAAUnB,GAAU,OATpC,EAaEoB,mBAAqB,WACnB,MAA+B,EAAKJ,MACpC,OADA,EAAQX,KAAR,EAAcC,QAAd,EAAuBC,KAd3B,EAkBEc,gCAAkC,WAChC,IAAQhB,EAAS,EAAKW,MAAdX,KACR,OAAOiB,KAAKC,MAAc,IAAPlB,EAAc,EAAKe,uBApB1C,4CAuBE,WACE,MAA+BI,KAAKR,MAA5BX,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IAEvB,OACE,qCACE,cAAC,EAAD,CAASI,MAAM,wBAAf,SACE,cAAC,EAAD,CACEd,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBAAiB0B,KAAKP,kBAI1B,cAAC,EAAD,CAASN,MAAM,aAAf,SACGa,KAAKJ,qBAAuB,EAC3B,cAAC,EAAD,CACEf,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOgB,KAAKJ,qBACZX,mBAAoBe,KAAKH,oCAG3B,cAAC,EAAD,CAAqBP,QAAQ,+BA7CzC,GAAyBW,aCDzBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.99d68ca0.chunk.js","sourcesContent":["// import css from './FeedbackOptions.module.css';\nimport PropTypes from 'prop-types';\n\nexport const FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return (\n    <div>\n      {options.map(option => (\n        <button\n          key={option}\n          type=\"button\"\n          name=\"option\"\n          onClick={() => {\n            onLeaveFeedback(option);\n          }}\n        >\n          {option}\n        </button>\n      ))}\n    </div>\n  );\n};\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.array,\n  onLeaveFeedbac: PropTypes.func,\n};\n","// import css from './Statistics.module.css';\nimport PropTypes from 'prop-types';\n\nexport const Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <ul>\n      <li>Good: {good}</li>\n      <li>Neutral: {neutral}</li>\n      <li>Bad: {bad}</li>\n      <li>Total:{total} </li>\n      <li>Positive feedback: {positivePercentage}% </li>\n    </ul>\n  );\n};\n\nStatistics.propTypes = {\n  good: PropTypes.number,\n  neutral: PropTypes.number,\n  bad: PropTypes.number,\n  total: PropTypes.number,\n  positivePercentage: PropTypes.number,\n};\n","// import css from '.Section.module.css';\nimport PropTypes from 'prop-types';\n\nexport const Section = ({ title, children }) => {\n  return (\n    <>\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.element,\n};\n","export const NotificationMessage = ({ message }) => {\n  return <p>{message}</p>;\n};\n","import { Component } from 'react';\nimport { FeedbackOptions } from 'components/FeedbackOptions/FeedbackOptions';\nimport { Statistics } from './Statistics/Statistics';\nimport { Section } from './Section/Section';\nimport { NotificationMessage } from './NotificationMessage/NotificatioMessage';\n\nexport class App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleCounter = option => {\n    this.setState(prevState => ({\n      [option]: prevState[option] + 1,\n    }));\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const { good } = this.state;\n    return Math.round((good * 100) / this.countTotalFeedback());\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={['good', 'neutral', 'bad']}\n            onLeaveFeedback={this.handleCounter}\n          />\n        </Section>\n\n        <Section title=\"Statistics\">\n          {this.countTotalFeedback() > 0 ? (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          ) : (\n            <NotificationMessage message=\"No feedback given\" />\n          )}\n        </Section>\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}